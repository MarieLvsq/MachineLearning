# -*- coding: utf-8 -*-
"""model_demo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kb5haXEv8HAjSX0PaAyiE1lUnVmkJmDB

Cell‚ÄØ1: Upload & Load Trained Model
"""

from google.colab import files
from tensorflow.keras.models import load_model

# Prompt to upload .h5 model file
print("üóÇÔ∏è Please upload your model file")
uploaded = files.upload()

# Load the first uploaded file as model
model_filename = list(uploaded.keys())[0]
model = load_model(model_filename)
print(f"‚úÖ Model loaded from '{model_filename}'")

"""Cell 2: Load CIFAR-10 Test Set"""

import numpy as np
from tensorflow.keras.datasets import cifar10

# Load and normalize
(x_train, y_train), (x_test, y_test) = cifar10.load_data()
x_test = x_test.astype("float32") / 255.0
y_test = y_test.flatten()

# Class names for display
class_names = ['airplane','automobile','bird','cat','deer',
               'dog','frog','horse','ship','truck']

print(f"üîç CIFAR‚Äë10 test set loaded: {x_test.shape[0]} samples")

"""Cell‚ÄØ3: Random Sample Inference"""

import matplotlib.pyplot as plt

# Pick 8 random test images
idxs = np.random.choice(len(x_test), size=8, replace=False)
samples, labels = x_test[idxs], y_test[idxs]

# Run inference
preds = model.predict(samples).argmax(axis=1)

# Plot GT vs. Pred
plt.figure(figsize=(12,4))
for i, (img, true, pred) in enumerate(zip(samples, labels, preds)):
    ax = plt.subplot(2, 4, i+1)
    plt.imshow(img)
    color = 'green' if pred == true else 'red'
    plt.title(f"GT:{class_names[true]}\nP:{class_names[pred]}", color=color)
    plt.axis('off')
plt.tight_layout()
plt.show()

"""Cell‚ÄØ4: Full‚ÄëSet Metrics & Confusion Matrix"""

from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns

# Predict on entire test set
y_pred = model.predict(x_test).argmax(axis=1)

# Classification report
print("üìä Classification Report:\n")
print(classification_report(y_test, y_pred, target_names=class_names))

# Confusion matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8,6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=class_names, yticklabels=class_names)
plt.xlabel("Predicted")
plt.ylabel("True")
plt.title("Confusion Matrix")
plt.show()

"""Cell‚ÄØ5: Upload & Predict Your Own Image"""

from PIL import Image

print("üñºÔ∏è Upload a 32√ó32 PNG/JPG to classify")
uploaded_img = files.upload()

for fn in uploaded_img:
    # Load, resize & normalize
    img = Image.open(fn).convert("RGB").resize((32,32))
    arr = np.array(img).astype("float32") / 255.0

    # Run prediction
    pred = model.predict(arr[np.newaxis, ...]).argmax()

    # Display
    plt.figure(figsize=(3,3))
    plt.imshow(arr)
    plt.title(f"Predicted: {class_names[pred]}")
    plt.axis("off")
    plt.show()